[{"/Users/dmitriyesko/Desktop/Projects/minesweeper/src/index.js":"1","/Users/dmitriyesko/Desktop/Projects/minesweeper/src/components/App/App.js":"2","/Users/dmitriyesko/Desktop/Projects/minesweeper/src/components/Tile/Tile.js":"3"},{"size":234,"mtime":1609781283000,"results":"4","hashOfConfig":"5"},{"size":7944,"mtime":1610390369000,"results":"6","hashOfConfig":"5"},{"size":1921,"mtime":1610390429000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11pc79d",{"filePath":"10","messages":"11","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dmitriyesko/Desktop/Projects/minesweeper/src/index.js",[],"/Users/dmitriyesko/Desktop/Projects/minesweeper/src/components/App/App.js",["16","17","18","19","20","21"],"import React, { useEffect, useState} from 'react'\nimport classNames from 'classnames'\nimport Tile from '../Tile/Tile'\n\nfunction App() {\n\n  const initailState = {\n    bombs: [],\n    numbers: [],\n    tiles: [],\n    width: 16,\n    height: 16,\n    difficulty: 'medium',\n    bombsCounter: 40,\n    flagCounter: 0,\n    isGameOver: false,\n  }\n\n  const [state, setState] = useState(initailState);\n\n  const selectDifficulty = difficulty => {\n\n    if (difficulty === 'easy') {\n      return {\n        ...state,\n        bombs: [],\n        numbers: [],\n        tiles: [],\n        width: 8,\n        height: 8,\n        bombsCounter: 10,\n        flagCounter: 0,\n        message: '',\n        isGameOver: false,\n        difficulty,\n        detonatedId: null,\n      }\n    }\n    if (difficulty === 'medium') {\n      return {\n        ...state,\n        bombs: [],\n        numbers: [],\n        tiles: [],\n        width: 16,\n        height: 16,\n        bombsCounter: 40,\n        flagCounter: 0,\n        message: '',\n        isGameOver: false,\n        difficulty,\n        detonatedId: null,\n      }\n    }\n    if (difficulty === 'hard') {\n      return {\n        ...state,\n        bombs: [],\n        numbers: [],\n        tiles: [],\n        width: 30,\n        height: 16,\n        bombsCounter: 99,\n        flagCounter: 0,\n        message: '',\n        isGameOver: false,\n        difficulty,\n        detonatedId: null,\n      }\n    }\n  }\n\n  const initGame = difficulty => {\n\n    const newState = selectDifficulty(difficulty)\n\n    const boardSize = newState.width * newState.height;\n\n    for (let i = 0; i < boardSize; i++) {\n      newState.tiles.push({\n        index: i,\n        isBomb: false,\n        number: 0,\n        isOpen: false,\n        isFlag: false,\n      })\n    }\n  \n    let x = 0;\n    let y = 0;\n\n    const generateBombs = (bombsCounter, maxTiles) => {\n      const bombsIndexes = new Set();\n\n      do {\n        bombsIndexes.add(Math.trunc(Math.random() * maxTiles))\n      } while (bombsIndexes.size < bombsCounter)\n  \n      bombsIndexes.forEach( index => {\n        newState.tiles.find( tile => {\n          if (tile.index === index) {\n            tile.isBomb = true;\n          }\n        })\n      })\n    }\n\n    generateBombs(newState.bombsCounter, boardSize)\n    \n    newState.tiles.forEach((tile) => {\n      tile.coords = `${x},${y}`;\n      \n      if (tile.isBomb) {\n        newState.bombs.push(`${x},${y}`);\n\n        if (x > 0 && y > 0) newState.numbers.push(`${x-1},${y-1}`);\n        if (y > 0) newState.numbers.push(`${x},${y-1}`);\n        if (y > 0 && x < newState.width - 1) newState.numbers.push(`${x+1},${y-1}`);\n\n        if (x > 0) newState.numbers.push(`${x-1},${y}`);\n        if (x < newState.width - 1) newState.numbers.push(`${x+1},${y}`);\n\n        if (x > 0 && y < newState.height - 1) newState.numbers.push(`${x-1},${y+1}`);\n        if (y < newState.height - 1) newState.numbers.push(`${x},${y+1}`);\n        if (x < newState.width - 1 && y < newState.height - 1) newState.numbers.push(`${x+1},${y+1}`);\n\n      }\n      \n      x++;\n      if (x >= newState.width) {\n        x = 0;\n        y++;\n      }\n    });\n    \n    newState.numbers.forEach(num => {\n      newState.tiles.find( tile => {\n        if (tile.coords === num) {\n          tile.number++;\n        }\n      })\n    });\n\n    setState(newState);\n  }\n\n  const openTile = (index) => {\n    const newState = {...state}\n    newState.tiles.find( tile => {\n      if (index === tile.index && tile.number === 0 && !tile.isBomb) {\n        openTilesAround(tile.coords, newState)\n      }\n      if (index === tile.index) {\n        tile.isOpen = true;\n      }\n    })\n    setState(newState);\n  }\n\n  const openTilesAround = (coords, state) => {\n\n    const emptyTiles = new Set();\n\n    const openEightTiles = coords => {\n      \n      const [x, y] = coords.split(',')\n    \n      const coordsAround = [\n        `${+x-1},${+y-1}`,\n        `${+x},${+y-1}`,\n        `${+x+1},${+y-1}`,\n        `${+x-1},${+y}`,\n        `${+x+1},${+y}`,\n        `${+x-1},${+y+1}`,\n        `${+x},${+y+1}`,\n        `${+x+1},${+y+1}`,    \n      ]\n\n      const newState = {...state}\n\n      coordsAround.forEach( coord => {\n        newState.tiles.find( tile => {\n          if (tile.coords === coord && !tile.isFlag) {\n            tile.isOpen = true;\n            if (tile.number === 0) {\n              emptyTiles.add(tile.coords)\n            }\n          }\n        })\n      })\n    }\n\n    openEightTiles(coords);\n\n    let initialLength = 0;\n\n    while (emptyTiles.size !== initialLength) {\n      initialLength = emptyTiles.size;\n      emptyTiles.forEach( coord => {\n        openEightTiles(coord) \n      })\n    }\n  }\n\n  const setFlag = (index) => {\n    const newState = {...state}\n    newState.tiles.find( tile => {\n      if (index === tile.index) {\n        tile.isFlag = !tile.isFlag;\n        if (tile.isFlag) {\n          newState.flagCounter += 1\n        } else {\n          newState.flagCounter -= 1\n        }\n      }\n    })\n    setState(newState);\n  }\n\n  const setGameOver = (bool, message, index) => {\n    showBombs();\n    setState({\n      ...state,\n      isGameOver: bool,\n      message: message,\n      detonatedId: index || null,\n    })\n  }\n\n  const showBombs = () => {\n    const newState = {...state};\n    newState.tiles.forEach( tile => {\n      if (tile.isBomb) {\n        tile.isFlag = false;\n        tile.isOpen = true;\n      }\n    })\n    setState(newState)\n  }\n\n  const winGame = () => {\n    const newState = {...state}\n    let openTilesCounter = 0;\n    newState.tiles.forEach( tile => {\n      if (tile.isOpen && !tile.isBomb) {\n        openTilesCounter +=1;\n      }\n      if (openTilesCounter === (newState.tiles.length - newState.bombsCounter)) {\n        setGameOver(true, 'Победа!')\n      }\n    })\n  }\n\n  useEffect( () => {\n    initGame('easy')\n  }, []);\n\n  return (\n    <div>\n      <div className='settings'>\n        <div className='flags'>\n          <div className='flagsCounter' title='Осталось мин'>{state.bombsCounter - state.flagCounter}</div>\n        </div>\n        <div className='newGame'>\n          <button \n            onClick={ () => {\n              initGame(state.difficulty)\n            }}\n          >\n            New Game\n          </button>\n        </div>\n        <div className='difficulty'>\n          <p style={{marginTop: '0.3em', marginBottom: '0.3em'}}>Выберите сложность:</p>\n          <select onChange={ evt => initGame(evt.target.value)}>\n            <option value='easy' title='Поле 8х8, 10 мин'>Новичок</option>\n            <option value='medium' title='Поле 16х16, 40 мин'>Любитель</option>\n            <option value='hard' title='Поле 30х16, 99 мин'>Профессионал</option>\n          </select>\n        </div>\n      </div>\n      <div className={\n        classNames({\n          'app': true,\n          'field': true,\n          'easy': state.difficulty === 'easy',\n          'medium': state.difficulty === 'medium',\n          'hard': state.difficulty === 'hard',\n        })\n      }>\n        {state.tiles.map( tile => {\n          return (<Tile\n            key={tile.index}\n            data={tile}\n            isGameOver={state.isGameOver}\n            detonatedId={state.detonatedId}\n            setGameOver={setGameOver}\n            winGame={winGame}\n            openTile={openTile}\n            setFlag={setFlag}\n          />)}\n        )}\n        {state.isGameOver && \n          <div\n            className={\n              classNames({\n                'messageBox': true,\n                'message__win': (state.message === 'Победа!'),\n                'message__lose': (state.message === 'Поражение!'),\n              })\n            }\n            onClick={ () => {\n              const box = document.querySelector('.messageBox');\n              box.style='display: none';\n            }}\n          >\n            <span>{state.message}</span>\n          </div>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n",["22","23"],"/Users/dmitriyesko/Desktop/Projects/minesweeper/src/components/Tile/Tile.js",[],{"ruleId":"24","severity":1,"message":"25","line":100,"column":35,"nodeType":"26","messageId":"27","endLine":100,"endColumn":37},{"ruleId":"24","severity":1,"message":"25","line":137,"column":33,"nodeType":"26","messageId":"27","endLine":137,"endColumn":35},{"ruleId":"24","severity":1,"message":"25","line":149,"column":31,"nodeType":"26","messageId":"27","endLine":149,"endColumn":33},{"ruleId":"24","severity":1,"message":"25","line":182,"column":35,"nodeType":"26","messageId":"27","endLine":182,"endColumn":37},{"ruleId":"24","severity":1,"message":"25","line":207,"column":31,"nodeType":"26","messageId":"27","endLine":207,"endColumn":33},{"ruleId":"28","severity":1,"message":"29","line":256,"column":6,"nodeType":"30","endLine":256,"endColumn":8,"suggestions":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},"array-callback-return","Array.prototype.find() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initGame'. Either include it or remove the dependency array.","ArrayExpression",["36"],"no-native-reassign",["37"],"no-negated-in-lhs",["38"],{"desc":"39","fix":"40"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [initGame]",{"range":"41","text":"42"},[5759,5761],"[initGame]"]